sessionInfo
sessionInfo()
rm(list=ls())
#Assume base R is running
my.wd <- getSrcDirectory(function(x){x})
#Check for errors
if(grepl("error", tolower(class(my.wd)[1]))){
#Try to access working directory through R Studio API
my.wd <- tryCatch(dirname(rstudioapi::getActiveDocumentContext()$path),
error = function(e) e)
}else if(length(my.wd)==0){
#Assume current directory is working directory
my.wd <- "."
}
#Set working directory
setwd(my.wd)
#Source function to install packages
source("functions/installPackageNotFound.R")
#Packages
installPackageNotFound("ggmap")
#installPackageNotFound("gridExtra")
installPackageNotFound("sp")
installPackageNotFound("rgdal")
installPackageNotFound("getPass")
installPackageNotFound("showtext")
my.wd
rm(list=ls())
#Assume base R is running
my.wd <- getSrcDirectory(function(x){x})
#Check for errors
if(length(my.wd)==0){
#Assume current directory is working directory
my.wd <- "."
}else if(grepl("error", tolower(class(my.wd)[1]))|my.wd==""){
#Try to access working directory through R Studio API
my.wd <- tryCatch(dirname(rstudioapi::getActiveDocumentContext()$path),
error = function(e) e)
}else{
my.wd <- "."
}
#Set working directory
setwd(my.wd)
#Source function to install packages
source("functions/installPackageNotFound.R")
#Packages
installPackageNotFound("ggmap")
#installPackageNotFound("gridExtra")
installPackageNotFound("sp")
installPackageNotFound("rgdal")
installPackageNotFound("getPass")
installPackageNotFound("showtext")
sessionInfo
sessionInfo()
#################################################
#Figure 4: Heat Map of Manual and Modeled Poultry Locations.
#################################################
rm(list=ls())
#Assume base R is running
my.wd <- getSrcDirectory(function(x){x})
#Check for errors
if(length(my.wd)==0){
#Assume current directory is working directory
my.wd <- "."
}else if(grepl("error", tolower(class(my.wd)[1]))|my.wd==""){
#Try to access working directory through R Studio API
my.wd <- tryCatch(dirname(rstudioapi::getActiveDocumentContext()$path),
error = function(e) e)
}else{
my.wd <- "."
}
#Set working directory
setwd(my.wd)
#Source function to install packages
source("functions/installPackageNotFound.R")
#Packages
installPackageNotFound("rgdal")
installPackageNotFound("RColorBrewer")
installPackageNotFound("sp")
installPackageNotFound("scales")
installPackageNotFound("showtext")
#Add font to match python figures
font_add(family = "DejaVu", regular = "../data/fonts/DejaVuSans.ttf",
bold = "../data/fonts/DejaVuSans-Bold.ttf")
#Enable showtext to set font
showtext_auto()
#################################################
#Read in shapefiles
#################################################
#Read in census block shapefile
shp.file <- readOGR("../data/shapefiles/cb_2017_37_bg_500k/cb_2017_37_bg_500k.shp",
"cb_2017_37_bg_500k")
#Set projection system
shp.file <- spTransform(shp.file, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
#################################################
#Read in facility data
#################################################
#Read in CAFO manually validated classes
cafo.locations <- read.csv("../data/csv/facility_accuracy_data.csv", stringsAsFactors = F)
#Read in manual census locations
manual.locations <- read.csv("../data/csv/manual_cafo_census.csv", stringsAsFactors = F)
#Prepare modeled data
modeled.cafos <- cafo.locations[,c("facility_id", "latitude", "longitude", "true_positive", "new_cafo")]
modeled.cafos$animal <- "POULTRY"
modeled.cafos$source <- "model"
modeled.cafos <- modeled.cafos[,c("facility_id", "latitude", "longitude", "animal", "true_positive", "source", "new_cafo")]
#Prepare manual census data
manual.cafos <- manual.locations[which(manual.locations$ANIMAL%in%c("POULTRY", "SWINE")), c("EWG_ID", "Y", "X", "ANIMAL")]
manual.cafos$true_positive <- 1
manual.cafos$source <- "manual"
manual.cafos$new_cafo <- 0
names(manual.cafos) <- names(modeled.cafos)
#Union modeled and manual data
all.cafos <- rbind(modeled.cafos, manual.cafos)
#Set coords for cafo locations
all.cafos <- SpatialPointsDataFrame(all.cafos[,c("longitude", "latitude")], all.cafos, proj4string = CRS(proj4string(shp.file)))
#Match locations to census blocks
cafo.blocks <- data.frame("GEOID" = over(all.cafos, shp.file)[,c("GEOID")], stringsAsFactors = F)
#Merge in demos
all.cafos@data <- cbind(all.cafos@data, cafo.blocks)
#Add all positive
all.cafos$all_positive <- 1
#Aggregate to block level
block.agg <- aggregate(cbind(all_positive, true_positive, new_cafo)~GEOID+source+animal, data = all.cafos, FUN = sum)
#Widen
block.agg <- reshape(block.agg, direction = "wide", idvar = c("GEOID", "source"), timevar = "animal")
#Replace NA's with 0's
cols <- unlist(sapply(c("POULTRY", "SWINE"), FUN=function(x)paste(c("all_positive", "true_positive", "new_cafo"),x , sep ="."), simplify = F))
for(this.col in cols){
block.agg[is.na(block.agg[,this.col]), this.col] <- 0
}
#################################################
#Map of cafo locations
#################################################
pdf("../figures/4_Figure_fgmap_Manual_Modeled_Poultry_Locations.pdf", width = 8.5, height = 10)
layout(matrix(c(1,1,1,4,1,1,rep(2,6),3,3,3,5,3,3),6,3,byrow=T),width=c(0.4,0.5,0.5), height=c(0.4,0.16,0.4,0.16,0.4,0.16))
par(mar=c(0,0.25,0,0.5), mai = c(0,0,0,0), tcl=-0.3,
pin = c(3,3),
pty = "m",
xaxt = 'n',
xpd = TRUE,
yaxt = 'n',
family = 'DejaVu')
#Create map for manual, modeled, and new locations
for(this.source in c("manual", "model", "new")){
#Source data
source.data <- ifelse(this.source=="manual", "manual", "model")
#Heatmap column
heatmap.column <- ifelse(this.source%in%c("manual", "model"), "all_positive.POULTRY", "new_cafo.POULTRY")
#Values
if(this.source%in%c("manual", "model")){
heatmap.values <- c(0,1,2,4,6,8,10,12,14,max(block.agg[,heatmap.column])+1)
}else{
heatmap.values <- c(0,1,2,3,max(block.agg[,heatmap.column])+1)
}
#Save object to global
assign(paste0("color.values.",heatmap.column), heatmap.values)
#Modeled map
shp.file.model <- merge(shp.file, block.agg[which(block.agg$source==source.data),], by = "GEOID", all.x = T)
shp.file.model@data[is.na(shp.file.model@data[,heatmap.column]), heatmap.column] <- 0
#Color bins
shp.file.model@data$cafo_group <- cut(shp.file.model@data[,heatmap.column],
heatmap.values,
right = F)
#Color wheel
color.ramp <- brewer.pal(length(levels(shp.file.model@data$cafo_group)),"YlOrRd")
assign(paste0("color.ramp.",heatmap.column), color.ramp)
#Heatmap
plot(shp.file.model, col = color.ramp[as.numeric(shp.file.model@data$cafo_group)],
border = alpha("#4d4d4d", 0.2), lwd = 0.3,
xlim=c(-81.3, -78.4), ylim=c(34-0.25, 37.2- 0.25))
#Determine title
if(this.source=="manual"){
this.title <- "Manual locations"
}else if(this.source=="model"){
this.title <- "Modelled locations"
}else{this.title<-"New locations"}
#Set title
title(this.title, line = -2,cex.main=2)
}
#Graphics params for legend 1
par(mar = c(3,1,3,1),
mgp=c(1.5,0.5,0), tcl=-0.3,
xaxt = 's',
xpd = TRUE,
yaxt = 's',
family = 'DejaVu')
#Create first legend
image(color.values.all_positive.POULTRY, 1, as.matrix(seq_along(color.values.all_positive.POULTRY)),
col=color.ramp.all_positive.POULTRY, xlab="Number of CAFOs",ylab="", axes=F)
axis(1)
#Graphics params for legend 2
par(mar = c(3,1,3,1),
mgp=c(1.5,0.5,0), tcl=-0.3,
xaxt = 's',
xpd = TRUE,
yaxt = 's',
family = 'DejaVu')
#Create second legend
image(color.values.new_cafo.POULTRY, 1, as.matrix(seq_along(color.values.new_cafo.POULTRY)),
col=color.ramp.new_cafo.POULTRY, xlab="Number of CAFOs",ylab="", axes=F)
axis(1)
dev.off()
#################################################
#Figure 5: Longitudinal Detection of CAFO Growth
#################################################
rm(list=ls())
#Assume base R is running
my.wd <- getSrcDirectory(function(x){x})
#Check for errors
if(length(my.wd)==0){
#Assume current directory is working directory
my.wd <- "."
}else if(grepl("error", tolower(class(my.wd)[1]))|my.wd==""){
#Try to access working directory through R Studio API
my.wd <- tryCatch(dirname(rstudioapi::getActiveDocumentContext()$path),
error = function(e) e)
}else{
my.wd <- "."
}
#Set working directory
setwd(my.wd)
#Source function to install packages
source("functions/installPackageNotFound.R")
#Packages
installPackageNotFound("ggmap")
installPackageNotFound("sp")
installPackageNotFound("rgdal")
installPackageNotFound("getPass")
installPackageNotFound("showtext")
#Add font to match python figures
font_add(family = "DejaVu", regular = "../data/fonts/DejaVuSans.ttf",
bold = "../data/fonts/DejaVuSans-Bold.ttf")
#Enable showtext to set font
showtext_auto()
#Ask for API key to use Google Maps
api.key <- getPass(msg="Please provide your Google Maps API Key:")
register_google(key = api.key)
#################################################
#Read in data from Model_Evaluation_Longitudinal_For_Paper notebook
#################################################
#Ground truth for cafo start years
ground.truth <- read.csv("../data/csv/longitudinal_images_ground_truth.csv", stringsAsFactors = F)
#Model results for cafo start years
model.results <- read.csv("../data/csv/longitudinal_images_modeled.csv", stringsAsFactors = F)
names(model.results) <- c("modeled_year", "model_score", "model_cafo_class", "image_id")
#Metadata on sampled cafos from the manual census that we used to gather the NAIP images
sampled.cafos <- read.csv("../data/csv/longitudinal_metadata.csv", stringsAsFactors = F)
#There are 862 unique images but 874 unique cafos (some cafos share an image)
#Take first CAFO per image
sampled.cafos <- sampled.cafos[!duplicated(sampled.cafos$image_id),]
#Merge together
ground.truth.merged <- merge(sampled.cafos, ground.truth, by = "image_id")
ground.truth.merged <- merge(ground.truth.merged, model.results, by = "image_id", all.x = T)
#Drop cafos that don't have images
ground.truth.merged <- ground.truth.merged[which(ground.truth.merged$create_year!='None'),]
#################################################
#Map of facility locations after plant opens
#################################################
#Location of the processing plant
plant.coords <- c(-77.669392,35.259436)
#get map from open street
city_map <- get_map(location = c(lon = plant.coords[1], lat =  plant.coords[2]), zoom = 9,
maptype = "hybrid", api_key = api.key)
#Separate manual and modeled data
manual.data <- ground.truth.merged
manual.data$dataset <- "Manual"
#Point type
manual.data$point.type <- "Existing CAFO"
manual.data$point.type[which(manual.data$create_year>=2011 & manual.data$image_id!="Poultry Plant")] <- "New CAFO"
manual.data$point.type[which(manual.data$image_id=="Poultry Plant")] <- "Plant Location"
manual.data$point.type <- as.factor(manual.data$point.type)
#Modeled data
modeled.data <- ground.truth.merged[!is.na(ground.truth.merged$modeled_year),]
modeled.data$dataset <- "Modelled"
#Point type
modeled.data$point.type <- "Existing CAFO"
modeled.data$point.type[which(modeled.data$modeled_year>=2011 & modeled.data$image_id!="Poultry Plant")] <- "New CAFO"
modeled.data$point.type[which(modeled.data$image_id=="Poultry Plant")] <- "Plant Location"
modeled.data$point.type <- as.factor(modeled.data$point.type)
#Combine datasets
master.map.data <- rbind(manual.data, modeled.data)
#Create Map
this.map <- ggmap(city_map) +
stat_density2d( data = master.map.data[which(master.map.data$point.type=="New CAFO"),],
geom="polygon",
aes( x = longitude, y = latitude, fill = ..level.. , alpha = ..level..) ) +
geom_point(x=plant.coords[1], y = plant.coords[2], col="white")+
geom_text(x=plant.coords[1], y = plant.coords[2]-0.05, label = "Feed mill", size = 1.5, col="white",
family = 'DejaVu')+
theme(axis.text.x= element_blank() ,
axis.text.y= element_blank() , axis.ticks.x= element_blank() ,
axis.ticks.y= element_blank() , axis.title = element_blank(),
legend.key.size = unit(0.2, "cm"),
legend.title = element_text(face="plain", family = 'DejaVu'),
legend.position = "bottom",
legend.key=element_blank(),
legend.background= element_blank(),
legend.text = element_text(size=5),
legend.margin=margin(t=-0.3, r=0, b=-0.3, l=0, unit="cm"),
title = element_text(size=7, face='bold', family = 'DejaVu'),
plot.title = element_text(margin=margin(0,0,-1.5,0)),
strip.background = element_blank(),
plot.margin = unit(c(-0.7,0.1,-0.5,0), "cm"),
strip.text.x = element_text(family = 'DejaVu'))+
scale_fill_continuous( low = "yellow", high = "red", name = "New CAFO Density")+
scale_alpha(range = c(0, 0.8), guide = FALSE)+
guides(fill = guide_colourbar(ticks = FALSE, label = FALSE))+
facet_wrap(~dataset)+
ggtitle("Poultry CAFO Growth")
#Save figure
ggsave("../figures/5_Figure_fgplant_New_CAFO_Growth_Density.pdf",
plot = this.map, width = 3.5, height = 2.3, units = "in")
sessionInfo()
